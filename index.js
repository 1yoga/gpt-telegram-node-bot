import { Telegraf, Markup } from 'telegraf';
import { chatWithGPT } from './openai.js';
import { defaultSettings, availableModels } from './config.js';
import dotenv from 'dotenv';
dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const userSettings = {};

bot.command('start', (ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ system prompt.');
});

bot.command('setup', (ctx) => {
  const uid = ctx.from.id;
  userSettings[uid] = userSettings[uid] || { ...defaultSettings };

  const settings = userSettings[uid];
  return ctx.reply(
    `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
–ú–æ–¥–µ–ª—å: ${settings.model}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${settings.temperature}
max_tokens: ${settings.max_tokens}`,
    Markup.inlineKeyboard([
      [
        Markup.button.callback('üìå –ú–æ–¥–µ–ª—å', 'setup_model'),
        Markup.button.callback('üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'setup_temperature'),
      ],
      [Markup.button.callback('üìù System prompt', 'setup_system')],
    ])
  );
});

bot.action('setup_model', async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:', Markup.inlineKeyboard(
    availableModels.map(model => Markup.button.callback(model, `select_model_${model}`)),
    { columns: 2 }
  ));
});

bot.action(/select_model_(.+)/, async (ctx) => {
  const model = ctx.match[1];
  const uid = ctx.from.id;
  userSettings[uid] = userSettings[uid] || { ...defaultSettings };
  userSettings[uid].model = model;
  await ctx.answerCbQuery(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${model}`);
  return ctx.editMessageText(`–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${model}`);
});

bot.action('setup_temperature', async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É:', Markup.inlineKeyboard([
    ['0.2', '0.5', '0.7', '1.0'].map(temp =>
      Markup.button.callback(temp, `select_temp_${temp}`)
    ),
  ]));
});

bot.action(/select_temp_(.+)/, async (ctx) => {
  const temp = parseFloat(ctx.match[1]);
  const uid = ctx.from.id;
  userSettings[uid] = userSettings[uid] || { ...defaultSettings };
  userSettings[uid].temperature = temp;
  await ctx.answerCbQuery(`‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}`);
  return ctx.editMessageText(`–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${temp}`);
});

bot.action('setup_system', async (ctx) => {
  const uid = ctx.from.id;
  await ctx.answerCbQuery();
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ system prompt (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"):');
  bot.once('text', (msgCtx) => {
    userSettings[uid].system = msgCtx.message.text;
    msgCtx.reply('‚úÖ System prompt —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  });
});

bot.on('text', async (ctx) => {
  const uid = ctx.from.id;
  const settings = userSettings[uid] || defaultSettings;
  try {
    ctx.sendChatAction('typing');
    const reply = await chatWithGPT(ctx.message.text, settings);
    ctx.reply(reply, { parse_mode: 'Markdown' });
  } catch (err) {
    console.error(err.response?.data || err.message);
    ctx.reply('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç —Å UI-–Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∑–∞–ø—É—â–µ–Ω');
