import { Telegraf } from 'telegraf';
import { chatWithGPT } from './openai.js';
import { defaultSettings, availableModels } from './config.js';
import dotenv from 'dotenv';
dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const userSettings = {};

bot.command('start', (ctx) => {
  ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ GPT. 
–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /settings —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (model, temperature, max_tokens, system).
–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: /settings_show`);
});

bot.command('settings', (ctx) => {
  const uid = ctx.from.id;
  userSettings[uid] = userSettings[uid] || { ...defaultSettings };

  const args = ctx.message.text.split(' ');
  const key = args[1];
  const value = args.slice(2).join(' ');

  if (!key || !value) {
    return ctx.reply(`–ò—Å–ø–æ–ª—å–∑—É–π:
  /settings model <–∏–º—è_–º–æ–¥–µ–ª–∏>
  /settings temperature <0-2>
  /settings max_tokens <—á–∏—Å–ª–æ>
  /settings system <–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏>`);
  }

  if (key === 'model') {
    if (!availableModels.includes(value)) {
      return ctx.reply(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–æ–¥–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${availableModels.join(', ')}`);
    }
    userSettings[uid].model = value;
  } else if (key === 'temperature') {
    const num = parseFloat(value);
    if (isNaN(num) || num < 0 || num > 2) {
      return ctx.reply('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 2');
    }
    userSettings[uid].temperature = num;
  } else if (key === 'max_tokens') {
    const num = parseInt(value);
    if (isNaN(num) || num < 1 || num > 8192) {
      return ctx.reply('max_tokens –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 8192');
    }
    userSettings[uid].max_tokens = num;
  } else if (key === 'system') {
    userSettings[uid].system = value;
  } else {
    return ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: model, temperature, max_tokens, system');
  }

  ctx.reply(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${key}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
});

bot.command('settings_show', (ctx) => {
  const uid = ctx.from.id;
  const s = userSettings[uid] || defaultSettings;
  ctx.reply(`üìå –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
- model: ${s.model}
- temperature: ${s.temperature}
- max_tokens: ${s.max_tokens}
- system: ${s.system || '(–Ω–µ –∑–∞–¥–∞–Ω–æ)'}`);
});

bot.on('text', async (ctx) => {
  const uid = ctx.from.id;
  const settings = userSettings[uid] || defaultSettings;
  try {
    ctx.sendChatAction('typing');
    const reply = await chatWithGPT(ctx.message.text, settings);
    ctx.reply(reply, { parse_mode: 'Markdown' });
  } catch (err) {
    console.error(err.response?.data || err.message);
    ctx.reply('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
